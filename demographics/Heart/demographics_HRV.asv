% % compare heart 2 samples

subjs_phys = [8 9 10 13 15 16 17 18 19 20 21 22 23 24 25 26 29 31 32 33 34 35 36 38 39 40 41 43 44];
% subj 37 not there?
% subjs_phys = [8 9 10 13 15 16 17 18 19 20 21 22 23 24 25 26 29 31 32 33 34 35 36 37 38 39 40 41 43 44];

% ['G:\HRVts\IBIts_S',sprintf('%.2d',subj_idx)];

subjs_navi = [2 3 4 9 10 12 13 15 16 17 18 19 21 22 23 25 28 29 30 31 32 33 35 36 38];
% ['I:\dataHeartNavi\IBIts_S',sprintf('%.2d',subj_idx)];


%% get plv


%% get PLV

% subjs_phys = [8 9 10 13 15 16 17 18 19 20 21 22 23 24 25 26 29 31 32 33 34 35 36 37 38 39 40 41 43 44];
% subjs_navi = [2 3 4 9 10 12 13 15 16 17 18 19 21 22 23 25 28 29 30 31 32 33 35 36 38 91];


subjectsPhysiens = subjs_phys
subjectsNavigastric = subjs_navi
cfgMain = global_getcfgmain
%%l oad all PLVs
indInside = tools_getIndexBrain('inside');
indOutside = tools_getIndexBrain('outside');



empirical = zeros(length(subjectsNavigastric)+length(subjectsPhysiens),153594); % Preallocate
surrogate = empirical; % for calculating t value


for iS=1:length(subjectsNavigastric)
    subj_idx = subjectsNavigastric(iS);
        cfgMain.sample = 1

    % empirical and chance PLV filenames
    
    filenamePLV = strcat(global_filename(subj_idx,cfgMain,strcat('PLVXVoxelFilename_',cfgMain.Timeseries2Regress)),'.nii');
    % filenamePLVSurrogate = strcat(global_filename(subj_idx,cfgMain,strcat('medianRotationFilename_',cfg.Timeseries2Regress)),'.nii');
    % filenamePLVSurrogate  = strcat(global_path2root,'subj',sprintf('%.2d',subj_idx),'\Timeseries','\ControlEGG_othesubject\median_sPLV_s',sprintf('%.2d',subj_idx),'.nii')
    filenamePLVSurrogate  = strcat(global_path2root(1),'subj',sprintf('%.2d',subj_idx),'\Timeseries','\ControlEGG_othersubjectBOTHSAMPLES\median_sPLV_s',sprintf('%.2d',subj_idx),'.nii');
    
    
    % Load empirical PLV
    
    PLVGroupEmpirical{iS+length(subjectsPhysiens)} = ft_read_mri(filenamePLV); % Put into cell
    PLVGroupEmpirical{iS+length(subjectsPhysiens)}.Nsubject = subjectsNavigastric(iS);
    
    % Preparing the FieldTrip structure needed for randomization
    PLVGroupEmpirical{iS+length(subjectsPhysiens)}.coh = PLVGroupEmpirical{iS+length(subjectsPhysiens)}.anatomy;
    PLVGroupEmpirical{iS+length(subjectsPhysiens)} = rmfield(PLVGroupEmpirical{iS+length(subjectsPhysiens)},'anatomy');
    PLVGroupEmpirical{iS+length(subjectsPhysiens)}.inside = indInside;
    PLVGroupEmpirical{iS+length(subjectsPhysiens)}.outside = indOutside;
    
    % Load surrogate PLV and prepare structure for surrogate PLV
    
    PLVGroupSurrogate{iS+length(subjectsPhysiens)} = ft_read_mri(filenamePLVSurrogate);
    PLVGroupSurrogate{iS+length(subjectsPhysiens)}.Nsubject = subjectsNavigastric(iS);
    PLVGroupSurrogate{iS+length(subjectsPhysiens)}.coh = PLVGroupSurrogate{iS+length(subjectsPhysiens)}.anatomy;
    PLVGroupSurrogate{iS+length(subjectsPhysiens)} = rmfield(PLVGroupSurrogate{iS+length(subjectsPhysiens)},'anatomy');
    PLVGroupSurrogate{iS+length(subjectsPhysiens)}.inside = indInside;
    PLVGroupSurrogate{iS+length(subjectsPhysiens)}.outside = indOutside;
    
    empirical(iS+length(subjectsPhysiens),:) = PLVGroupEmpirical{iS+length(subjectsPhysiens)}.coh(:);
    surrogate(iS+length(subjectsPhysiens),:) = PLVGroupSurrogate{iS+length(subjectsPhysiens)}.coh(:);
    
end


for iS=1:length(subjectsPhysiens)
    
    cfgMain.sample = 2
    subj_idx = subjectsPhysiens(iS);
    
    % empirical and chance PLV filenames
    
    filenamePLV = strcat(global_filename(subj_idx,cfgMain,strcat('PLVXVoxelFilename_',cfgMain.Timeseries2Regress)),'.nii');
    filenamePLVSurrogate  = strcat(global_path2root(2),'subj',sprintf('%.2d',subj_idx),'\Timeseries','\ControlEGG_othersubjectBOTHSAMPLES\median_sPLV_s',sprintf('%.2d',subj_idx),'.nii');
    
    
    % Load empirical PLV
    
    PLVGroupEmpirical{iS} = ft_read_mri(filenamePLV); % Put into cell
    PLVGroupEmpirical{iS}.Nsubject = subjectsPhysiens(iS)+40;
    
    % Preparing the FieldTrip structure needed for randomization
    PLVGroupEmpirical{iS}.coh = PLVGroupEmpirical{iS}.anatomy;
    PLVGroupEmpirical{iS} = rmfield(PLVGroupEmpirical{iS},'anatomy');
    PLVGroupEmpirical{iS}.inside = indInside;
    PLVGroupEmpirical{iS}.outside = indOutside;
    
    % Load surrogate PLV and prepare structure for surrogate PLV
    
    PLVGroupSurrogate{iS} = ft_read_mri(filenamePLVSurrogate);
    PLVGroupSurrogate{iS}.Nsubject = subjectsPhysiens(iS)+40;
    PLVGroupSurrogate{iS}.coh = PLVGroupSurrogate{iS}.anatomy;
    PLVGroupSurrogate{iS} = rmfield(PLVGroupSurrogate{iS},'anatomy');
    PLVGroupSurrogate{iS}.inside = indInside;
    PLVGroupSurrogate{iS}.outside = indOutside;
    
    empirical(iS,:) = PLVGroupEmpirical{iS}.coh(:);
    surrogate(iS,:) = PLVGroupSurrogate{iS}.coh(:);
end

gasnetmask = global_getGastricNetwork;% = ft_read_mri ('Z:\ClusterResults\All\AAAAAAAAsurrSubjectsBothSample_nR10000_CA0050_kw3_fir2_fspread_015_fOrder_5_tw_15csfr_mask.nii');
CS_bothsamples = [empirical(:,find(gasnetmask)) - surrogate(:,find(gasnetmask))] ;
CS_bothsamples_meanXSubject = mean(CS_bothsamples,2);


%% get ibi

all_ibi_phys = zeros(length(subjs_phys),890);
for iS = 1:length(subjs_phys)
    subj_idx = subjs_phys(iS)
load(['Z:\dataHeartPhys\IBIts_S' sprintf('%.2d',subj_idx) '.mat'])
all_ibi_phys(iS,:) = ibi_int(1:890);
end


all_ibi_navi = zeros(length(subjs_navi),889);
for iS = 1:length(subjs_navi)
    subj_idx = subjs_navi(iS)
load(['Z:\dataHeartNavi\IBIts_S' sprintf('%.2d',subj_idx) '.mat'])
all_ibi_navi(iS,:) = ibi_int(1:889);
end


data = [all_ibi_phys];
nVoxels = size(data,1);
%load base fieldtrip data structure
load(strcat('Z:\scripts\STOMACH_BRAIN\files\sampleFieldtripStruc.mat'))
% Define fieldtrip structure
channelStr=cell(nVoxels,1);
for iVoxel = 1:nVoxels
    channelList(iVoxel,1) = iVoxel;
    channelStr(iVoxel) = cellstr(mat2str(iVoxel));
end

dataStructure.hdr = EGG_downsampled.hdr;
dataStructure.fsample = 1;
dataStructure.time{1,1}  = [0:1:(size(data,2))-1];
dataStructure.label = channelStr;
dataStructure.cfg = EGG_downsampled.cfg;
dataStructure.trial{1,1} = data;
cfgWelch = [];
cfgWelch.keeptrials = 'no';
cfgWelch.lengthWindow = 120;
cfgWelch.overlap = 6;
len = dataStructure.fsample*cfgWelch.lengthWindow; % length of subtrials cfg.length s in samples
dataStructure.sampleinfo=[1 max(dataStructure.time{1,1})*dataStructure.fsample];
cfg = [];
cfg.trl(:,1) = dataStructure.sampleinfo(1):(len/cfgWelch.overlap):dataStructure.sampleinfo(2)-len+1;%trial start in samples from begining of raw data
cfg.trl(:,2) = dataStructure.sampleinfo(1)+len-1:(len/cfgWelch.overlap):dataStructure.sampleinfo(2);%trial ends in samples from begining of raw data
cfg.trl(:,3) = 0; %offset of the trigger with respect to the trial
data_trials = ft_redefinetrial(cfg,dataStructure);
% Estimate spectrum
cfg = [];
cfg.method = 'mtmfft';
cfg.taper = 'hanning';
cfg.output = 'pow';
cfg.pad = 1000;
cfg.foilim = [1/cfgWelch.lengthWindow 0.4]; % 0 - 6 cpm
cfg.keeptrials = cfgWelch.keeptrials;
frequencyWelch_Phys = ft_freqanalysis(cfg,data_trials);


data = [all_ibi_navi];
nVoxels = size(data,1);
%load base fieldtrip data structure
load(strcat('Z:\scripts\STOMACH_BRAIN\files\sampleFieldtripStruc.mat'))
% Define fieldtrip structure
channelStr=cell(nVoxels,1);
for iVoxel = 1:nVoxels
    channelList(iVoxel,1) = iVoxel;
    channelStr(iVoxel) = cellstr(mat2str(iVoxel));
end

dataStructure.hdr = EGG_downsampled.hdr;
dataStructure.fsample = 1;
dataStructure.time{1,1}  = [0:1:(size(data,2))-1];
dataStructure.label = channelStr;
dataStructure.cfg = EGG_downsampled.cfg;
dataStructure.trial{1,1} = data;
cfgWelch = [];
cfgWelch.keeptrials = 'no';
cfgWelch.lengthWindow = 120;
cfgWelch.overlap = 6;
len = dataStructure.fsample*cfgWelch.lengthWindow; % length of subtrials cfg.length s in samples
dataStructure.sampleinfo=[1 max(dataStructure.time{1,1})*dataStructure.fsample];
cfg = [];
cfg.trl(:,1) = dataStructure.sampleinfo(1):(len/cfgWelch.overlap):dataStructure.sampleinfo(2)-len+1;%trial start in samples from begining of raw data
cfg.trl(:,2) = dataStructure.sampleinfo(1)+len-1:(len/cfgWelch.overlap):dataStructure.sampleinfo(2);%trial ends in samples from begining of raw data
cfg.trl(:,3) = 0; %offset of the trigger with respect to the trial
data_trials = ft_redefinetrial(cfg,dataStructure);
% Estimate spectrum
cfg = [];
cfg.method = 'mtmfft';
cfg.taper = 'hanning';
cfg.output = 'pow';
cfg.pad = 1000;
cfg.foilim = [1/cfgWelch.lengthWindow 0.4]; % 0 - 6 cpm
cfg.keeptrials = cfgWelch.keeptrials;
frequencyWelch_Navi = ft_freqanalysis(cfg,data_trials);

%% get power for GLM not zscored


ind_lf = find(frequencyWelch_Phys.freq > 0.05 & frequencyWelch_Phys.freq < 0.16)
ind_hf = find(frequencyWelch_Phys.freq > 0.15 & frequencyWelch_Phys.freq < 0.41)
ind_vlf = find(frequencyWelch_Phys.freq > 0.019 & frequencyWelch_Phys.freq < 0.065)


power_all = [frequencyWelch_Phys.powspctrm',frequencyWelch_Navi.powspctrm']



figure
plot(frequencyWelch_Navi.freq(freq4zscore),mean(power_all(freq4zscore,:),2),'b')


std_power_all = std(power_all,[],2)./sqrt(size(power_all,2));

HF_power_all = mean(power_all(ind_hf,:))';
LF_power_all = mean(power_all(ind_lf,:))';
VLF_power_all = mean(power_all(ind_vlf,:))';



outliers=zeros(1,size(power_all,2));

threshold_hf= mean(HF_power_all)+2*std(HF_power_all);
threshold_lf= mean(LF_power_all)+2*std(LF_power_all);

outliers = HF_power_all>threshold_hf | LF_power_all >threshold_lf

figure;histogram(LF_power_all(~outliers));
figure;histogram(HF_power_all(~outliers));


power_all_thresh =power_all(:,~outliers);
HF_power_all_t = mean(power_all(ind_hf,~outliers));
LF_power_all_t = mean(power_all(ind_lf,~outliers));


%Plot 1

figure
plot(HF_power_all_t,CS_bothsamples_meanXSubject(~outliers),'ok')
[r,p]=corrcoef(HF_power_all_t,CS_bothsamples_meanXSubject(~outliers))
lsline
title(['wo hf r ',num2str(r(3)),' p ',num2str(p(3))])
figure
plot(LF_power_all_t,CS_bothsamples_meanXSubject(~outliers),'ob')
[r,p]=corrcoef(LF_power_all_t,CS_bothsamples_meanXSubject(~outliers))
lsline
title(['wo lf r ',num2str(r(3)),' p ',num2str(p(3))])

% plot 2 without more outliers
cs_thresh4outliers1 = CS_bothsamples_meanXSubject(~outliers);
% new_outliers = LF_power_all_t<2.5e-05 & HF_power_all_t<1.25e-05
new_outliers = LF_power_all_t<4e-05 & HF_power_all_t<2e-05
new_outliers = new_outliers'
figure
plot(HF_power_all_t(new_outliers),cs_thresh4outliers1(new_outliers),'ok')
[r,p]=corrcoef(HF_power_all_t(new_outliers),cs_thresh4outliers1(new_outliers))
lsline
title(['no hf r ',num2str(r(3)),' p ',num2str(p(3))])

figure
plot(LF_power_all_t(new_outliers),HF_power_all_t(new_outliers),'or')
[r,p]=corrcoef(LF_power_all_t(new_outliers),HF_power_all_t(new_outliers))
lsline
title(['no hf lf r ',num2str(r(3)),' p ',num2str(p(3))])


%corr btw h and l f
figure
plot(LF_power_all_t(new_outliers),cs_thresh4outliers1(new_outliers),'ob')
[r,p]=corrcoef(LF_power_all_t(new_outliers),cs_thresh4outliers1(new_outliers))
lsline
title(['no lf r ',num2str(r(3)),' p ',num2str(p(3))])

% corr with ratio
figure
plot(LF_power_all_t(new_outliers)./HF_power_all_t(new_outliers),cs_thresh4outliers1(new_outliers),'ok')
[r,p]=corrcoef(LF_power_all_t(new_outliers)./HF_power_all_t(new_outliers),cs_thresh4outliers1(new_outliers))
lsline
title(['no ratio r ',num2str(r(3)),' p ',num2str(p(3))])





HF_power_all_c =HF_power_all_t(new_outliers)'-mean(HF_power_all_t(new_outliers))
LF_power_all_c = LF_power_all_t(new_outliers)'-mean(LF_power_all_t(new_outliers))'
RATIO_c = LF_power_all_t(new_outliers)./HF_power_all_t(new_outliers) - nanmean(LF_power_all_t(new_outliers)./HF_power_all_t(new_outliers))
RATIO_c = RATIO_c'


HF_power_all_c =zscore(HF_power_all_t(new_outliers))'
LF_power_all_c = zscore(LF_power_all_t(new_outliers))'
RATIO_c = LF_power_all_t(new_outliers)./HF_power_all_t(new_outliers) - nanmean(LF_power_all_t(new_outliers)./HF_power_all_t(new_outliers))
RATIO_c = RATIO_c'

figure
nhist(RATIO_c)



%% zscored
power_all_thresh =power_all(:,~outliers);

freq4zscore = frequencyWelch_Phys.freq > 0.05 & frequencyWelch_Phys.freq < 0.41
power_phys_z =zscore(frequencyWelch_Phys.powspctrm(:,freq4zscore),[],2);
power_navi_z=zscore(frequencyWelch_Navi.powspctrm(:,freq4zscore),[],2);


std_power_navi = std(frequencyWelch_Navi.powspctrm(:,freq4zscore),[],2)./sqrt(size(frequencyWelch_Navi.powspctrm(:,freq4zscore),2));
std_power_phys = std(frequencyWelch_Phys.powspctrm(:,freq4zscore),[],2)./sqrt(size(frequencyWelch_Phys.powspctrm(:,freq4zscore),2));

power_phys_unit =frequencyWelch_Phys.powspctrm(:,freq4zscore)./std_power_phys
power_navi_unit=frequencyWelch_Navi.powspctrm(:,freq4zscore)./std_power_navi


power_all_unit = [power_phys_unit',power_navi_unit'];



figure
plot(frequencyWelch_Navi.freq(freq4zscore),mean(power_all_unit,2),'b')
hold on
title('HRV power')
xlabel('freq')
ylabel('STD unit power')
set(gca,'fontsize',16)




ratio_lf_hf_all_unit = mean(power_all_unit(1:length(ind_lf),:),1)./mean(power_all_unit(length(ind_lf):end,:),1)
figure
nhist(ratio_lf_hf_all_unit)


% corr with ratio
figure
plot(ratio_lf_hf_all_unit(ratio_lf_hf_all_unit<8),CS_bothsamples_meanXSubject(ratio_lf_hf_all_unit<8),'ok')
[r,p]=corrcoef(ratio_lf_hf_all_unit(ratio_lf_hf_all_unit<8),CS_bothsamples_meanXSubject(ratio_lf_hf_all_unit<8))
lsline
title(['no ratio r ',num2str(r(3)),' p ',num2str(p(3))])

% corr with hf
figure
plot(mean(power_all_unit(1:length(ind_lf),:),1),CS_bothsamples_meanXSubject,'ok')
% [r,p]=corrcoef(ratio_lf_hf_all_unit(ratio_lf_hf_all_unit<8),CS_bothsamples_meanXSubject(ratio_lf_hf_all_unit<8))
lsline
title(['no ratio r ',num2str(r(3)),' p ',num2str(p(3))])

% corr with hf
figure
plot(mean(power_all_unit(length(ind_lf):end,:),1),CS_bothsamples_meanXSubject,'ok')
% [r,p]=corrcoef(ratio_lf_hf_all_unit(ratio_lf_hf_all_unit<8),CS_bothsamples_meanXSubject(ratio_lf_hf_all_unit<8))
lsline
% title(['no ratio r ',num2str(r(3)),' p ',num2str(p(3))])

%% Get all parameters both samples
power_all = [frequencyWelch_Phys.powspctrm',frequencyWelch_Navi.powspctrm']
std_power_all = std(power_all,[],2)./sqrt(size(power_all,2));

HF_power_all = mean(power_all(ind_hf,:))';
LF_power_all = mean(power_all(ind_lf,:))';
VLF_power_all = mean(power_all(ind_vlf,:))';

figure
plot(frequencyWelch_Navi.freq,mean(power_all,2))
hold on
% errorbar(frequencyWelch_Navi.freq,mean(power_all,2),std_power_all,'color',[0.7,0.25,0])
plot(frequencyWelch_Navi.freq,mean(power_all,2),'r','Linewidth',10)
title('HRV power')
xlabel('freq')
ylabel('power (squared ms)')
set(gca,'fontsize',16)
shg


%% threshold
% figure
power_all = [frequencyWelch_Phys.powspctrm',frequencyWelch_Navi.powspctrm'];
outliers=zeros(1,size(power_all,2));
threshold=(mean(mean(power_all))+2*std(mean(power_all)));
outliers=mean(power_all)>threshold;
power_all_thresh =power_all(:,~outliers);
threshold=(mean(mean(power_all_thresh))+2*std(mean(power_all_thresh)));
outliers=mean(power_all)>threshold;
power_all_thresh =power_all(:,~outliers);
threshold=(mean(mean(power_all_thresh))+2*std(mean(power_all_thresh)));
outliers=mean(power_all)>threshold;
power_all_thresh =power_all(:,~outliers);

HF_power_all_t = mean(power_all(ind_hf,~outliers));
LF_power_all_t = mean(power_all(ind_lf,~outliers));
VLF_power_all_t = mean(power_all(ind_vlf,~outliers));
% pLOT 

figure
plot(HF_power_all_t,CS_bothsamples_meanXSubject(~outliers),'ok')
[r,p]=corrcoef(HF_power_all_t,CS_bothsamples_meanXSubject(~outliers))
lsline
title(num2str(r(3)))
figure
plot(LF_power_all_t,CS_bothsamples_meanXSubject(~outliers),'ob')
[r,p]=corrcoef(LF_power_all_t,CS_bothsamples_meanXSubject(~outliers))
lsline
title(num2str(r(3)))
figure
plot(VLF_power_all_t,CS_bothsamples_meanXSubject(~outliers),'or')
[r,p]=corrcoef(VLF_power_all_t,CS_bothsamples_meanXSubject(~outliers))
lsline
title(num2str(r(3)))

figure
plot(LF_power_all_t./HF_power_all_t,CS_bothsamples_meanXSubject(~outliers),'ob')
[r,p]=corrcoef(LF_power_all_t./HF_power_all_t,CS_bothsamples_meanXSubject(~outliers))
lsline
title(num2str(r(3)))



%% power zscored
power_phys_z =zscore(frequencyWelch_Phys.powspctrm,[],2);
power_navi_z=zscore(frequencyWelch_Navi.powspctrm,[],2);
% figure

power_all = [power_phys_z',power_navi_z'];
outliers=zeros(1,size(power_all,2));
threshold=(mean(mean(power_all))+2*std(mean(power_all)));
outliers=mean(power_all)>threshold;
% power_all_thresh =power_all(:,~outliers);
% threshold=(mean(mean(power_all_thresh))+2*std(mean(power_all_thresh)));
% outliers=mean(power_all)>threshold;
% power_all_thresh =power_all(:,~outliers);
% threshold=(mean(mean(power_all_thresh))+2*std(mean(power_all_thresh)));
% outliers=mean(power_all)>threshold;
% power_all_thresh =power_all(:,~outliers);

HF_power_all_t = mean(power_all(ind_hf,~outliers));
LF_power_all_t = mean(power_all(ind_lf,~outliers));
VLF_power_all_t = mean(power_all(ind_vlf,~outliers));
% pLOT 

figure
plot(HF_power_all_t,CS_bothsamples_meanXSubject(~outliers),'ok')
[r,p]=corrcoef(HF_power_all_t,CS_bothsamples_meanXSubject(~outliers))
lsline
title(['z HF ',num2str(r(3)),' p ',num2str(p(3)) ])
figure
plot(LF_power_all_t,CS_bothsamples_meanXSubject(~outliers),'ob')
[r,p]=corrcoef(LF_power_all_t,CS_bothsamples_meanXSubject(~outliers))
lsline
title(['z LF ',num2str(r(3)),' p ',num2str(p(3)) ])
figure
plot(VLF_power_all_t,CS_bothsamples_meanXSubject(~outliers),'or')
[r,p]=corrcoef(VLF_power_all_t,CS_bothsamples_meanXSubject(~outliers))
lsline
title(['z VLF ',num2str(r(3)),' p ',num2str(p(3)) ])

figure
plot(LF_power_all_t./HF_power_all_t,CS_bothsamples_meanXSubject(~outliers),'ob')
[r,p]=corrcoef(LF_power_all_t./HF_power_all_t,CS_bothsamples_meanXSubject(~outliers))
lsline
title(['z ratio ',num2str(r(3)),' p ',num2str(p(3)) ])


%% for spm

HF_power_all_c =HF_power_all_t'-mean(HF_power_all_t)
LF_power_all_c = LF_power_all_t'-mean(LF_power_all_t)'
VLF_power_all_c=VLF_power_all_t'-mean(VLF_power_all_t)'
RATIO_c = HF_power_all_t./LF_power_all_t - nanmean(HF_power_all_t./LF_power_all_t)
RATIO_c = RATIO_c'

figure
nhist(RATIO_c)


figure
plot(RATIO_c,CS_bothsamples_meanXSubject,'ob')
[r,p]=corrcoef(RATIO_c,CS_bothsamples_meanXSubject)
lsline
title(['z ratio ',num2str(r(3)),' p ',num2str(p(3)) ])


figure
plot(HF_power_all_c,RATIO_c,'ok')
[r,p]=corrcoef(RATIO_c,HF_power_all_c)
ylabel('Ratio')
xlabel('HFpower')

title(['HF powerc,RATIO' ,num2str(r(3))])
lsline
figure
plot(LF_power_all_c,RATIO_c,'ok')
[r,p]=corrcoef(RATIO_c,LF_power_all_c)
ylabel('Ratio')
xlabel('LFpower')

title(['LF power,RATIO' ,num2str(r(3))])
lsline

figure
plot(LF_power_all_c,HF_power_all_c,'ok')
[r,p]=corrcoef(LF_power_all_c,HF_power_all_c)
xlabel('LFpower')
ylabel('HFpower')

title(['LF power,HF power' ,num2str(r(3))])
lsline

%% power no

%% check effect of regressing ratio

toBeExplained = [LF_power_all_c HF_power_all_c,CS_bothsamples_meanXSubject]; % BOLD timeseries will be the variable to be explained out in the GLM

% csf_timeseries = nanmean(BOLD_filtered_zscored(logical(csf),:)); % Average the timeseries in the csf compartment
explainingVariables = [RATIO_c]; % Variables used to explain the BOLD data
betas_regression = tools_EfficientGLM(toBeExplained,explainingVariables); % Obtain the betas indicating how much the predicting variable predicts the data
predictedBOLD = explainingVariables(:,1) *betas_regression(1,:); % What the BOLD timeseries should look like if CSF predicted at 100% accuracy the data
error_hrv = toBeExplained - predictedBOLD; % The error is the portion of the data not predicted by the CSF signal

figure
plot(error_hrv(:,1),error_hrv(:,3),'ok');lsline
[r,p]=corrcoef(error_hrv(:,1),error_hrv(:,3))
title(['residuals LF power,CS' ,num2str(r(3))])

figure
plot(error_hrv(:,1),error_hrv(:,2),'ok');lsline
[r,p]=corrcoef(error_hrv(:,1),error_hrv(:,2))
title(['residuals LF power,HF power' ,num2str(r(3))])

figure
plot(error_hrv(:,2),error_hrv(:,3),'ok');lsline
[r,p]=corrcoef(error_hrv(:,2),error_hrv(:,3))
title(['residuals HF power,CS' ,num2str(r(3))])




toBeExplained = [CS_bothsamples_meanXSubject]; % BOLD timeseries will be the variable to be explained out in the GLM
explainingVariables = [HF_power_all_c ,LF_power_all_c,VLF_power_all_c,RATIO_c]; % Variables used to explain the BOLD data
betas_regression = tools_EfficientGLM(toBeExplained,explainingVariables); % Obtain the betas indicating how much the predicting variable predicts the data
predictedBOLD = explainingVariables(:,1)*betas_regression(1)+explainingVariables(:,2) *betas_regression(2)+explainingVariables(:,3) *betas_regression(3)+explainingVariables(:,4) *betas_regression(4); % What the BOLD timeseries should look like if CSF predicted at 100% accuracy the data
error_cs= toBeExplained - predictedBOLD; % The error is the portion of the data not predicted by the CSF signal

figure
plot(explainingVariables(:,1)*betas_regression(1),CS_bothsamples_meanXSubject,'ok')

figure
plot(error_hrv(:,1),error_hrv(:,3),'ok');lsline
[r,p]=corrcoef(error_hrv(:,1),error_hrv(:,3))
title(['residuals LF power,CS' ,num2str(r(3))])

figure
plot(error_hrv(:,1),error_hrv(:,2),'ok');lsline
[r,p]=corrcoef(error_hrv(:,1),error_hrv(:,2))
title(['residuals LF power,HF power' ,num2str(r(3))])

figure
plot(error_hrv(:,2),error_hrv(:,3),'ok');lsline
[r,p]=corrcoef(error_hrv(:,2),error_hrv(:,3))
title(['residuals HF power,CS' ,num2str(r(3))])


%% OLD
%% plot figure poster

figure
plot(frequencyWelch_Navi.freq,mean(zscore(frequencyWelch_Phys.powspctrm,[],2)),'r')
[h p ci stats] = ttest2(zscore(frequencyWelch_Navi.powspctrm,[],2),zscore(frequencyWelch_Phys.powspctrm,[],2))
errorbar(frequencyWelch_Navi.freq,mean(power_phys_z),std_power_phys,'r')
title('HRV power')
xlabel('freq')
ylabel('Z power')
set(gca,'fontsize',16)



figure
plot(frequencyWelch_Navi.freq,mean(zscore(frequencyWelch_Phys.powspctrm,[],2)),'r')
[h p ci stats] = ttest2(zscore(frequencyWelch_Navi.powspctrm,[],2),zscore(frequencyWelch_Phys.powspctrm,[],2))
errorbar(frequencyWelch_Navi.freq,mean(power_phys_z),std_power_phys,'r')
title('HRV power')
xlabel('freq')
ylabel('Z power')
set(gca,'fontsize',16)
%% median split high and low and ttest



%% low high power
% 
% subjs_phys = [8 9 10 13 15 16 17 18 19 20 21 22 23 24 25 26 29 31 32 33 34 35 36 37 38 39 40 41 43 44];
% subjs_navi = [2 3 4 9 10 12 13 15 16 17 18 19 21 22 23 25 28 29 30 31 32 33 35 36 38 91];

power_vlf_navi = mean(power_navi_z(:,ind_vlf),2)
power_vlf_phys = mean(power_phys_z(:,ind_vlf),2)


powervlf_all = [power_vlf_navi',power_vlf_phys']

%high power
subjs_navi_hr = power_vlf_navi > median(powervlf_all)
subjs_phys_hr = power_vlf_phys > median(powervlf_all)

subjNavi2Cluster_hr = subjs_navi(subjs_navi_hr)
subjPhys2cluster_hr =subjs_phys(subjs_phys_hr)

%low power
subjs_navi_lr = power_vlf_navi <= median(powervlf_all)
subjs_phys_lr = power_vlf_phys <= median(powervlf_all)

subjNavi2Cluster_lr = subjs_navi(subjs_navi_lr)
subjPhys2cluster_lr =subjs_phys(subjs_phys_lr)

cfgMain.clusterAlpha = 0.025


cfgMain.numberofrandomizations = 1000
timeseries_statsCluster_PLV2samplettest(subjs_navi(subjs_navi_hr),subjs_phys(subjs_phys_hr),subjs_navi(subjs_navi_lr),subjs_phys(subjs_phys_lr),cfgMain)



%% freq statistics
% something is wrong with the design matrix

frequencyWelch_Navi_z = frequencyWelch_Navi;
frequencyWelch_Navi_z.powspctrm = power_navi_z;
frequencyWelch_Phys_z = frequencyWelch_Phys;
frequencyWelch_Phys_z.powspctrm = power_phys_z;

cfg = [];
cfg.statistic        = 'ft_statfun_indepsamplesT';
cfg.method = 'montecarlo'
cfg.tail             = 0;
cfg.clustertail      = 0;
cfg.alpha            = 0.025;
cfg.numrandomization = 1000;
cfgStats.clusteralpha = 0.025;



cfg.design(1,:) = [1:56];
% cfgStats.design(1,:) = [1:length(subjects_highStai) 1:length(subjects_lowStai)];
cfg.design(2,:) = [ones(1,size(frequencyWelch_Navi_z.powspctrm,1)) ones(1,size(frequencyWelch_Phys_z.powspctrm,1))*2];
% cfgStats.uvar        = 1; % row of design matrix that contains unit variable (in this case: subjects)
cfg.ivar        = 2; % row of design matrix that contains independent variable (the conditions)

% design = zeros(1,size(frequencyWelch_Navi_z.powspctrm,1) + size(frequencyWelch_Phys_z.powspctrm,1));
% design(1,1:size(frequencyWelch_Navi_z.powspctrm,1)) = 1;
% design(1,(size(frequencyWelch_Navi_z.powspctrm,1)+1):(size(frequencyWelch_Navi_z.powspctrm,1)+...
% size(frequencyWelch_Phys_z.powspctrm,1))) = 2;
% 
% cfg.design           = design;
% cfg.ivar             = 1;



stats = ft_freqstatistics(cfg,frequencyWelch_Navi_z,frequencyWelch_Phys_z)
%% 
ratio_all= [ratio_lf_hf_navi',ratio_lf_hf_phys']


subjectsTableheart = [ratio_all;powervlf_all;subjs_navi,subjs_phys]
subjectsTableheart = subjectsTableheart'
% subjs_phys = [8 9 10 13 15 16 17 18 19 20 21 22 23 24 25 26 29 31 32 33 34 35 36 37 38 39 40 41 43 44];
% subjs_navi = [2 3 4 9 10 12 13 15 16 17 18 19 21 22 23 25 28 29 30 31 32 33 35 36 38 91];

%high ratio
subjs_navi_hr = ratio_lf_hf_navi > median(ratio_all)
subjs_phys_hr = ratio_lf_hf_phys > median(ratio_all)

subjNavi2Cluster = subjs_navi(subjs_navi_hr)
subjPhys2cluster =subjs_phys(subjs_phys_hr)

cfgMain.clusterAlpha = 0.025
% timeseries_statsCluster_Regression_surrSubj_2s(subjNavi2Cluster,subjPhys2cluster,cfgMain)

%low ratio
subjs_navi_hr = ratio_lf_hf_navi <= median(ratio_all)
subjs_phys_hr = ratio_lf_hf_phys <= median(ratio_all)

subjNavi2Cluster = subjs_navi(subjs_navi_hr)
subjPhys2cluster =subjs_phys(subjs_phys_hr)

cfgMain.clusterAlpha = 0.025
% timeseries_statsCluster_Regression_surrSubj_2s(subjNavi2Cluster,subjPhys2cluster,cfgMain)


%% nonz
% 
% [h p ci stats] = ttest2(frequencyWelch_Phys.powspctrm,frequencyWelch_Navi.powspctrm)
% 
% figure
% plot(frequencyWelch_Navi.freq,mean(frequencyWelch_Navi.powspctrm),'b')
% hold on
% plot(frequencyWelch_Navi.freq,mean(frequencyWelch_Phys.powspctrm),'r')
% plot(frequencyWelch_Navi.freq,h*0.1,'k')
% 
% 
% 
% ind_lf = find(frequencyWelch_Phys.freq > 0.05 & frequencyWelch_Phys.freq < 0.16)
% ind_hf = find(frequencyWelch_Phys.freq > 0.15 & frequencyWelch_Phys.freq < 0.41)
% 
% 
% ratio_lf_hf_phys = mean(frequencyWelch_Phys.powspctrm(:,ind_lf),2)./mean(frequencyWelch_Phys.powspctrm(:,ind_hf),2)
% ratio_lf_hf_navi = mean(frequencyWelch_Navi.powspctrm(:,ind_lf),2)./mean(frequencyWelch_Navi.powspctrm(:,ind_hf),2)
% 
% 
% [h p ci stats] = ttest2(ratio_lf_hf_phys,ratio_lf_hf_navi)
% 
% 
% figure
% bar([mean(ratio_lf_hf_phys);mean(ratio_lf_hf_navi)])
% frequencyWelch_Phys.powspctrm




lsline
[r,p]=corrcoef(ratio_all,CS_bothsamples_meanXSubject)
[r,p]=corrcoef(ratio_all(1:26),CS_bothsamples_meanXSubject(1:26))
[r,p]=corrcoef(ratio_all(27:55),CS_bothsamples_meanXSubject(27:55))

title('r = -0.27 p = 0.042')
xlabel('LF to HF ratio')
ylabel('PLV in gasnet')
hold on
line([median(ratio_all),median(ratio_all)],[0.15 0.4])

notoutliers_ratio = find(ratio_all >-6 & ratio_all<6)
ratio_all_nooutlier = ratio_all(notoutliers_ratio)
figure
plot(ratio_all_nooutlier,CS_bothsamples_meanXSubject(notoutliers_ratio),'ok')
[r,p]=corrcoef(ratio_all_nooutlier,CS_bothsamples_meanXSubject(notoutliers_ratio))


figure
plot(powervlf_all,CS_bothsamples_meanXSubject,'ok')
lsline
hold on
plot(powervlf_all(1:26),CS_bothsamples_meanXSubject(1:26),'ob')
plot(powervlf_all(27:55),CS_bothsamples_meanXSubject(27:55),'or')
% [r,p]=corrcoef(powervlf_all,PLV_bothsamples_meanXSubject)
% title('r = -0.27 p = 0.042')
xlabel('VLF power')
ylabel('PLV in gasnet')
hold on
line([median(powervlf_all),median(powervlf_all)],[0.15 0.4])




 [h p ci stats] = ttest2(CS_bothsamples_meanXSubject(ratio_all<median(ratio_all),:),CS_bothsamples_meanXSubject(ratio_all>median(ratio_all),:));
 
%% Distribution across participants
figure
subplot(2,1,1)
violin(ratio_all')
title('ratio_all')
subplot(2,1,2)
plot(ratio_all','ok')
hold on
line([26.5 26.5],[-10 10])


figure
subplot(2,1,1)
violin({powervlf_all(1:26)',powervlf_all(27:56)'})
title('powervlf_all')
subplot(2,1,2)
plot(powervlf_all','ok')
hold on
line([26.5 26.5],[-2 2])


%% variables per voxel lf/hf ratio
a = []
a.highRatio =  mean(CS_bothsamples(ratio_all>median(ratio_all),:));
a.lowRatio =  mean(CS_bothsamples(ratio_all<median(ratio_all),:));
a.all =   mean(CS_bothsamples);
[h p ci stats]= ttest2(a.highRatio,a.lowRatio);
figure
nhist(a,'median')
title(['Mean CS  per voxel across participants p',num2str(p),' t ', num2str(stats.tstat)])

a = []
a.highRatio =  var(CS_bothsamples(ratio_all>median(ratio_all),:));
a.lowRatio =  var(CS_bothsamples(ratio_all<median(ratio_all),:));
a.all =   var(CS_bothsamples);

figure
nhist(a,'median')
[h p ci stats]= ttest2(a.highRatio,a.lowRatio);
title(['Variance CS per voxel across participants p',num2str(p),' t ', num2str(stats.tstat)])


a = []
a.highRatio =  mean(CS_bothsamples(ratio_all>median(ratio_all),:),2);
a.lowRatio =  mean(CS_bothsamples(ratio_all<median(ratio_all),:),2);
a.all =   mean(CS_bothsamples,2);

figure
nhist(a,'median')
[h p ci stats]= ttest2(a.highRatio,a.lowRatio);
title(['Mean CS  per participants across voxels  p',num2str(p),' t ', num2str(stats.tstat)])

a = []
a.highRatio =  var(CS_bothsamples(ratio_all>median(ratio_all),:),[],2);
a.lowRatio =  var(CS_bothsamples(ratio_all<median(ratio_all),:),[],2);
a.all=   var(CS_bothsamples,[],2);
figure
nhist(a,'median')
[h p ci stats]= ttest2(a.highRatio,a.lowRatio);
title(['Variance CS per participants across voxels  p',num2str(p),' t ', num2str(stats.tstat)])

%%
a = []
a.highPower =  mean(CS_bothsamples(powervlf_all>median(powervlf_all),:));
a.lowPower =  mean(CS_bothsamples(powervlf_all<median(powervlf_all),:));
a.all =   mean(CS_bothsamples);

[h p ci stats]= ttest2(a.highPower,a.lowPower);
figure
nhist(a,'median')
title(['Mean CS  per voxel across participants p',num2str(p),' t ', num2str(stats.tstat)])

a = []
a.highPower =  var(CS_bothsamples(powervlf_all>median(powervlf_all),:));
a.lowPower =  var(CS_bothsamples(powervlf_all<median(powervlf_all),:));
a.all =   var(CS_bothsamples);

figure
nhist(a,'median')
[h p ci stats]= ttest2(a.highPower,a.lowPower);
title(['Variance CS per voxel across participants p',num2str(p),' t ', num2str(stats.tstat)])


a = []
a.highPower =  mean(CS_bothsamples(powervlf_all>median(powervlf_all),:),2);
a.lowPower =  mean(CS_bothsamples(powervlf_all<median(powervlf_all),:),2);
a.all =   mean(CS_bothsamples,2);

figure
nhist(a,'median')
[h p ci stats]= ttest2(a.highPower,a.lowPower);
title(['Mean CS  per participants across voxels  p',num2str(p),' t ', num2str(stats.tstat)])

a = []
a.highPower =  var(CS_bothsamples(powervlf_all>median(powervlf_all),:),[],2);
a.lowPower =  var(CS_bothsamples(powervlf_all<median(powervlf_all),:),[],2);
a.all=   var(CS_bothsamples,[],2);

figure
nhist(a,'median')
[h p ci stats]= ttest2(a.highPower,a.lowPower);
title(['Variance CS per participants across voxels  p',num2str(p),' t ', num2str(stats.tstat)])


%% perform GLM on ratio


clusterMap = ft_read_mri ('Z:\ClusterResults\All\surrSubjectsBothSample_nR1000_CA0010_kw3_fir2_fspread_015_fOrder_5_tw_15csfr_ClusterMap.nii');
clusterMap = clusterMap.anatomy(:);
nclusters = max(clusterMap);


nSubjects = size(coupling_strenght,1);
CS_cluster_subject = zeros(nSubjects,nclusters);
for iCluster = 1: nclusters
    indCluster = find(clusterMap==iCluster);
    for iSubj =1:nSubjects
   CS_cluster_subject(iSubj,iCluster)= mean(coupling_strenght(iSubj,indCluster),2);
    end
end

r_ratio_cluster = zeros(nclusters,1);
p_ratio_cluster = zeros(nclusters,1);

for iCluster = 1: nclusters
[r,p]= corrcoef(CS_cluster_subject(:,iCluster),ratio_all);
r_ratio_cluster(iCluster) = r(3)
p_ratio_cluster(iCluster) = p(3)
end
r_ratio_cluster(find(p_ratio_cluster<0.05))
p_ratio_cluster(find(p_ratio_cluster<0.05))

find(p_ratio_cluster<0.05)


% vlf power
r_vlf_cluster = zeros(nclusters,1);
p_vlf_cluster = zeros(nclusters,1);

for iCluster = 1: nclusters
[r,p]= corrcoef(CS_cluster_subject(:,iCluster),powervlf_all);
r_vlf_cluster(iCluster) = r(3);
p_vlf_cluster(iCluster) = p(3);
end
r_vlf_cluster(find(p_vlf_cluster<0.05))
p_vlf_cluster(find(p_vlf_cluster<0.05))

find(p_vlf_cluster<0.05)


%% export table for demographics

exportTable = [subjs_navi,subjs_phys;powervlf_all;ratio_all]'
% 
% subjs_phys = [8 9 10 13 15 16 17 18 19 20 21 22 23 24 25 26 29 31 32 33 34 35 36 37 38 39 40 41 43 44];
% subjs_navi = [2 3 4 9 10 12 13 15 16 17 18 19 21 22 23 25 28 29 30 31 32 33 35 36 38 91];


